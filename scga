#!/usr/bin/env python

#
# The program starts with execution of the "main"-function
#
def main():
    
    import sys
    
    for term in ['h','help','-h','--help']:
        if term in sys.argv:
            print helpMessage
            sys.exit()

    app = AnalysisPipe()
    app.run()


#
# The init function is always run first when the object AnalysisPipe is created.
#
class AnalysisPipe(object):

    def __init__(self,):
        import sys
        import os
        import time

        AnalysisPipe.masterPid = os.getpid()

        try:
            path = sys.argv[1]
            path = os.path.abspath(path)
            if path[-1] == '/': path = path[:-1]
            AnalysisPipe.path = path
            AnalysisPipe.programPath = os.path.abspath(sys.argv[0])
            if os.path.islink(AnalysisPipe.programPath ): AnalysisPipe.programPath = os.readlink(AnalysisPipe.programPath)
            AnalysisPipe.scriptPath    = '/'+'/'.join(AnalysisPipe.programPath.split('/')[:-1])
            AnalysisPipe.referencePath = '/'+'/'.join(AnalysisPipe.programPath.split('/')[:-2])+'/references'
        except IndexError:
            sys.stderr.write('#ERROR_MSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Please supply a path on your commandline (currently: "'+' '.join(sys.argv)+'")\n')
            sys.exit(1)


        self.openLogfileConnection()

        return None


    def getDataBase(self,):
    
        import os
        import time
        from database_functions import Database, Settings
    
        AnalysisPipe.database = Database(self.path+'/data.db', self)
        if not os.path.exists(AnalysisPipe.database.path): AnalysisPipe.database.create()
        
        AnalysisPipe.settings = Settings(self)
        AnalysisPipe.settings.setDefaults()
        AnalysisPipe.settings.loadFromDb()


    def run(self, ):
        
        import time
        import sys
        import socket
        
        try: self.action = sys.argv[2]
        except IndexError:
            msg = '#ERROR_MSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Please supply an action on your commandline (currently: "'+' '.join(sys.argv)+'"), exiting.\n'
            AnalysisPipe.logfile.write(msg)
            sys.stderr.write(msg)
            sys.exit(1)
        
        self.getDataBase()
        
        import os
        
        AnalysisPipe.database.addToRunsTable(time.time(),self.action,' '.join(sys.argv),False,os.getpid())
        AnalysisPipe.logfile.write('#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Running '+' '.join(sys.argv)+'\n')
        AnalysisPipe.logfile.write('#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Hostname '+socket.gethostname()+'\n')

        #
        # check for valid action
        #
        AnalysisPipe.logfile.write('#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Action is '+sys.argv[2]+'\n')
        if self.action == 'addSample':self.addSample()
        elif self.action == 'addFastq':self.addFastq()
        elif self.action == 'changeSetting':self.changeSetting()
        elif self.action == 'createScripts':self.createScripts()
        elif self.action == 'submitScripts':self.submitScripts()
        else:
            msg = '#ERROR_MSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Please supply a Valid action on your commandline (currently: "'+' '.join(sys.argv)+'"), exiting.\n'
            AnalysisPipe.logfile.write(msg)
            sys.stderr.write(msg)
            sys.stderr.write('\n'+self.getReadme())
            sys.exit(1)
            
        AnalysisPipe.settings.saveToDb()
   

 
    def createScripts(self, ):
    
        from mapping_functions import SampleMapper
        alloursamples_list = self.database.getSamples()
        samplemapper_object = SampleMapper(self)
        for sample in alloursamples_list:
            samplemapper_object.Bowtie2_mapping(sample)
            
        from trimming_functions import SampleTrimmer
        alloursamples_list = self.database.getSamples()
        sampletrimmer_object = SampleTrimmer(self)
        for sample in alloursamples_list:
            sampletrimmer_object.trimming(sample)
            
        from merge_functions import SampleMerger
        alloursamples_list = self.database.getSamples()
        samplemerger_object = SampleMerger(self)
        for sample in alloursamples_list:
            samplemerger_object.merge_mapped_reads(sample)
            
        from filter_fix_functions import SampleFilterAndFix
        alloursamples_list = self.database.getSamples()
        samplefnf_object = SampleFilterAndFix(self)
        for sample in alloursamples_list:
            samplefnf_object.filter_and_fix(sample)
              
        from realignerTC_functions import SampleRealignTargetCreator
        alloursamples_list = self.database.getSamples()
        samplerealTC_object = SampleRealignTargetCreator(self)
        for sample in alloursamples_list:
            samplerealTC_object.realign_target_creator(sample)
            
        from reAlign_functions import SampleReAlignAndReCalibrator
        alloursamples_list = self.database.getSamples()
        samplerealign_object = SampleReAlignAndReCalibrator(self)
        for sample in alloursamples_list:
            samplerealign_object.realign_and_recalibrate(sample)
            
        from haplotype_calling_functions import SampleHaplotypeCaller
        alloursamples_list = self.database.getSamples()
        samplehaplotypecaller_object = SampleHaplotypeCaller(self)
        for sample in alloursamples_list:
            samplehaplotypecaller_object.haplotype_calling(sample)
            
        from qc_functions import SampleQC
        alloursamples_list = self.database.getSamples()
        sampleqc_object = SampleQC(self)
        for sample in alloursamples_list:
            sampleqc_object.qcSteps(sample)



    def addFastq(self,):
        
        import sys
        import time
        
        try: sample = sys.argv[3]
        except IndexError:
            msg = '#ERROR_MSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Please supply a sample name on your commandline (currently: "'+' '.join(sys.argv)+'"), exiting.\n'
            AnalysisPipe.logfile.write(msg)
            sys.stderr.write(msg)
            sys.exit(1)
        
        try:
            f1 = sys.argv[4]
            f2 = sys.argv[5]
        except IndexError:
            msg = '#ERROR_MSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Please supply a pair of fastq files on your commandline (currently: "'+' '.join(sys.argv)+'"), exiting.\n'
            AnalysisPipe.logfile.write(msg)
            sys.stderr.write(msg)
            sys.exit(1)
        
        AnalysisPipe.database.addFastqs(sample,f1,f2)
        
    def addSample(self, ):
        import sys
        import time
        try: AnalysisPipe.database.addSample(sys.argv[3],newSampleRefType=sys.argv[4])
        except IndexError: AnalysisPipe.database.addSample(sys.argv[3])
        
    def openLogfileConnection(self,):
        """ open a connection to the logfile, creates a logfile if none is present """
        
        #
        # Imports
        #
        import sys
        import time
        import os
        
        #
        # for logmessages
        #        
        tmpLogMessages = []
        
        #
        # check if logfile present open connection or create
        #
        AnalysisPipe.logfile = self.path + '/logfile.txt'
        if os.path.isfile(AnalysisPipe.logfile):
            if 'initiateAnalysis' in sys.argv:
                sys.stderr.write('#ERROR_MSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# The logfile already exists please use another path to initiate the analysis.\n')
                sys.exit(1)
            else:
                AnalysisPipe.logfile = open(AnalysisPipe.logfile,'a',1)
                AnalysisPipe.logfile.write('----------------\n#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Connection to logfile '+AnalysisPipe.logfile.name+' opened.\n')
                return 0
        else:
            tmpLogMessage = '#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Creating the logfile "'+AnalysisPipe.logfile+'".'
            tmpLogMessages.append(tmpLogMessage)
            tmpLogMessage = '#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Looking for folder '+self.path+'...'
            tmpLogMessages.append(tmpLogMessage)
        if not os.path.isdir(self.path):
            tmpLogMessage = '#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Path '+self.path+' not found creating...'
            tmpLogMessages.append(tmpLogMessage)
            os.mkdir(self.path)
            AnalysisPipe.logfile = open(AnalysisPipe.logfile,'w',1)
        
        AnalysisPipe.logfile.write('\n'.join(tmpLogMessages)+'\n')
    
        return tmpLogMessages
    
    def changeSetting(self,):
        
        import sys
        import time
        
        try:
            settings2change = sys.argv[3:]
            if not settings2change: raise IndexError
        except IndexError:
            msg = '#ERROR_MSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Please supply atleast one variable name and value on your commandline on the format variableName=value or include the term "listsettings" to get a list of available variable names (currently: "'+' '.join(sys.argv)+'"), exiting.\n'
            AnalysisPipe.logfile.write(msg)
            sys.stderr.write(msg)
            sys.exit(1)
        
        if 'listsettings' in settings2change:
            longestName = max([len(x) for x in AnalysisPipe.settings.explenations.keys()])
            sys.stderr.write('VariableName:'+''.join(' ' for i in range(longestName-len('VariableName:')))+'\t'+'Description:'+'\n')
            for variableName, description in AnalysisPipe.settings.explenations.iteritems():
                sys.stderr.write(variableName+''.join(' ' for i in range(longestName-len(variableName)))+'\t'+description+' (currentValue='+str(AnalysisPipe.settings.__dict__[variableName])+')\n')
        
        for setting2change in settings2change:
            if setting2change == 'listsettings': continue
            variableName,value = setting2change.split('=')
            self.settings.setVariable(variableName,value)
            self.settings.saveToDb()

    def getReadme(self):
        """ function that gets the information from the readme file
        """
        
        import os
    
        filehandle = open( '/'.join(os.path.realpath(__file__).split('/')[:-1]) + '/README.md' )
        data = filehandle.read()
        filehandle.close()
        
        return data
    
    
    def submitScripts(self):
        """ A function that submits the sbatch scripts generated by createScripts for all samples
        """
        
        import time

        allSampleDependency = []
        for sample in AnalysisPipe.database.getSamples():

            AnalysisPipe.logfile.write('#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Submitting sbatches for sample: '+sample.name+' ... \n')
            try: sample.getFastqs().next()
            except StopIteration:
                AnalysisPipe.logfile.write('#WARNING#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# No fastq files found for sample: '+sample.name+' continuing with next sample.\n')
                continue
        
            dependency = []
            for filePairId,readCount,fastq1,fastq2,sampleId in sample.getFastqs():
        
                fileName = sample.scriptPath+'/trimming.'+sample.name+'.'+str(filePairId)+'.sbatch.sh'
                jobid = submitSbatch(fileName)
                AnalysisPipe.logfile.write('#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Submitted trimming of fastq '+str(filePairId)+' for '+sample.name+' with job id '+str(jobid)+' \n')
                
                fileName = sample.scriptPath+'/mapping.'+sample.name+'.'+str(filePairId)+'.sbatch.sh'
                jobid = submitSbatch(fileName,dependency=[jobid])
                dependency.append(jobid)
                AnalysisPipe.logfile.write('#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Submitted mapping of fastq '+str(filePairId)+' for '+sample.name+' with job id '+str(jobid)+' \n')
        
            fileName = sample.scriptPath+'/merge.'+sample.name+'.sbatch.sh'
            jobid = submitSbatch(fileName,dependency=dependency)
            AnalysisPipe.logfile.write('#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Submitted mering of mapped data for '+sample.name+' with job id '+str(jobid)+' \n')
            
            fileName = sample.scriptPath+'/fnf.'+sample.name+'.sbatch.sh'
            jobid = submitSbatch(fileName,dependency=[jobid])
            AnalysisPipe.logfile.write('#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Submitted fixing the of merged data for '+sample.name+' with job id '+str(jobid)+' \n')
            
            fileName = sample.scriptPath+'/realTC.'+sample.name+'.sbatch.sh'
            jobid = submitSbatch(fileName,dependency=[jobid])
            AnalysisPipe.logfile.write('#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Submitted realignerTargetCreator of data for '+sample.name+' with job id '+str(jobid)+' \n')
            
            fileName = sample.scriptPath+'/reAlign.'+sample.name+'.sbatch.sh'
            jobid = submitSbatch(fileName,dependency=[jobid])
            AnalysisPipe.logfile.write('#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Submitted reAlignAndReCalibrate of data for '+sample.name+' with job id '+str(jobid)+' \n')
            
            fileName = sample.scriptPath+'/haplotypeCalling.'+sample.name+'.sbatch.sh'
            hapJobid = submitSbatch(fileName,dependency=[jobid])
            allSampleDependency.append(hapJobid)
            AnalysisPipe.logfile.write('#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Submitted haplotypecalling for '+sample.name+' with job id '+str(jobid)+' \n')
            
            fileName = sample.scriptPath+'/qcSteps.'+sample.name+'.sbatch.sh'
            jobid = submitSbatch(fileName,dependency=[jobid])
            AnalysisPipe.logfile.write('#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'#'+str(AnalysisPipe.masterPid)+'# Submitted qc steps for '+sample.name+' with job id '+str(jobid)+' \n')
        
        
def submitSbatch(filename,dependency=None):

    import subprocess
    import sys

    if dependency and (None not in dependency):
        command = ['sbatch','--dependency=afterok:'+':'.join(dependency),filename]
    else:
        command = ['sbatch',filename]
    
    sbatch = subprocess.Popen( command, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
    sbatch_out, errdata = sbatch.communicate()
    
    if sbatch.returncode != 0:
        print 'sbatch view Error code', sbatch.returncode, errdata
        print sbatch_out
        print filename
        sys.exit()

    jobid = sbatch_out.split('\n')[0].split(' ')[3]

    return jobid        




if __name__ == "__main__": main()
